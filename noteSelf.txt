To send data from client to server component one of the ways is to use .bind method
https://nextjs.org/docs/13/app/api-reference/functions/server-actions

WHen using spaces in searchParams, the spaces are encoded with % and numbers like 20, so decode them we use decodeURIComponent a method which will decode the search Params

Delay or latency while performing CRUD operations in the app was most likely at vercel end not your app, as when deployed in render it was running smoothly as expected

One of the problem - when i delete or add bookmark, later when i tried to edit any one of other bookmark, lets say the bookmark next to the deleted bookmark, when the update box opens, the contents of the deleted bookmark shows up, the selected bookmark contents should have been opened, 
- I thought the reason could be that when server parent component rerenders the client child component wasn't rendering, so i did console log and turns out its true, 
- but later when i put proper keys as bookmark id for each of the child component, it worked properly, even though the child component wasn't rerendered when parent component was rerendered, Ig the html doc is created on server itself, but only the client iteractivity part is executed in client side
- So when i searched, the key component actually helped in cases where i m using components passing props, to make sure the child components also rerenders in case there's any change

Problem while setting up the google auth feature
- All i had to do was add the application code , but needed to to be added in client component only 
- and add the code in auth/callback route.turns- Also add the domains which i was accessing in the supabase 'redirect url' dashboard


Shadn ui components
- https://blocks.starterkitpro.com/?ref=dailydev

Optimized bookmarking feature, reducing page load time from 5 seconds to 2-3 seconds by fetching metadata during the add operation instead of the get operation.

- One of the code practice always refactor and never ever repeat code like rewrite the same code, make use of fn then 

- While creating extension, i thought of extracting metadata from the extension, i.e client side only, but extracting metadata requires packages which can run only in server side 

Resource about forming backend api routes nextjs
- https://nextjs.org/docs/app/api-reference/file-conventions/route

While building extension, one of the major problems faced was the CORS error and fighuring out how to create backend as we cant create backend in extension
Some of the ways were creating serverless functions, or creating backend on main machine(which i did at first), it works better in local, as ppl wont be able to access it apart from local 
- To fix the cors issue i had to write the headers in next.config.mjs, and due to ONE MISSING COMMA, wasted 6 hours